{"ast":null,"code":"var _jsxFileName = \"E:\\\\University\\\\ERP\\\\React_Tailwind_EcommerceAdmin_Dashboard\\\\src\\\\components\\\\OrdersTable.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { TableBody, TableContainer, Table, TableHeader, TableCell, TableRow, TableFooter, Avatar, Badge, Pagination } from \"@windmill/react-ui\";\nimport response from \"../utils/demo/ordersData\";\n\nconst OrdersTable = _ref => {\n  let {\n    resultsPerPage,\n    filter\n  } = _ref;\n  const [page, setPage] = useState(1);\n  const [data, setData] = useState([]); // pagination setup\n\n  const totalResults = response.length; // pagination change control\n\n  function onPageChange(p) {\n    setPage(p);\n  } // on page change, load new sliced data\n  // here you would make another server request for new data\n\n\n  useEffect(() => {\n    // If Filters Applied\n    if (filter === \"paid\") {\n      setData(response.filter(order => order.status === \"Paid\").slice((page - 1) * resultsPerPage, page * resultsPerPage));\n    }\n\n    if (filter === \"un-paid\") {\n      setData(response.filter(order => order.status === \"Un-paid\").slice((page - 1) * resultsPerPage, page * resultsPerPage));\n    }\n\n    if (filter === \"completed\") {\n      setData(response.filter(order => order.status === \"Completed\").slice((page - 1) * resultsPerPage, page * resultsPerPage));\n    } // if filters dosent applied\n\n\n    if (filter === \"all\" || !filter) {\n      setData(response.slice((page - 1) * resultsPerPage, page * resultsPerPage));\n    }\n  }, [page, resultsPerPage, filter]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(TableContainer, {\n    className: \"mb-8\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Table, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(TableHeader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(TableCell, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 15\n    }\n  }, \"Client\"), /*#__PURE__*/React.createElement(TableCell, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 15\n    }\n  }, \"Order ID\"), /*#__PURE__*/React.createElement(TableCell, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 15\n    }\n  }, \"Amount\"), /*#__PURE__*/React.createElement(TableCell, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 15\n    }\n  }, \"Status\"), /*#__PURE__*/React.createElement(TableCell, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 15\n    }\n  }, \"Date\"))), /*#__PURE__*/React.createElement(TableBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 11\n    }\n  }, data.map((user, i) => /*#__PURE__*/React.createElement(TableRow, {\n    key: i,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(TableCell, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"flex items-center text-sm\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(Avatar, {\n    className: \"hidden mr-3 md:block\",\n    src: user.avatar,\n    alt: \"User image\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"font-semibold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 23\n    }\n  }, user.name)))), /*#__PURE__*/React.createElement(TableCell, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"text-sm\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 19\n    }\n  }, \"#000\", i)), /*#__PURE__*/React.createElement(TableCell, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"text-sm\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 19\n    }\n  }, \"$ \", user.amount)), /*#__PURE__*/React.createElement(TableCell, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Badge, {\n    type: user.status === \"Un-paid\" ? \"danger\" : user.status === \"Paid\" ? \"success\" : user.status === \"Completed\" ? \"warning\" : \"neutral\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 19\n    }\n  }, user.status)), /*#__PURE__*/React.createElement(TableCell, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"text-sm\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 19\n    }\n  }, new Date(user.date).toLocaleDateString())))))), /*#__PURE__*/React.createElement(TableFooter, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Pagination, {\n    totalResults: totalResults,\n    resultsPerPage: resultsPerPage,\n    label: \"Table navigation\",\n    onChange: onPageChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 11\n    }\n  }))));\n};\n\nexport default OrdersTable;","map":{"version":3,"sources":["E:/University/ERP/React_Tailwind_EcommerceAdmin_Dashboard/src/components/OrdersTable.js"],"names":["React","useState","useEffect","TableBody","TableContainer","Table","TableHeader","TableCell","TableRow","TableFooter","Avatar","Badge","Pagination","response","OrdersTable","resultsPerPage","filter","page","setPage","data","setData","totalResults","length","onPageChange","p","order","status","slice","map","user","i","avatar","name","amount","Date","date","toLocaleDateString"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  TableBody,\r\n  TableContainer,\r\n  Table,\r\n  TableHeader,\r\n  TableCell,\r\n  TableRow,\r\n  TableFooter,\r\n  Avatar,\r\n  Badge,\r\n  Pagination,\r\n} from \"@windmill/react-ui\";\r\nimport response from \"../utils/demo/ordersData\";\r\n\r\nconst OrdersTable = ({ resultsPerPage, filter }) => {\r\n  const [page, setPage] = useState(1);\r\n  const [data, setData] = useState([]);\r\n\r\n  // pagination setup\r\n  const totalResults = response.length;\r\n\r\n  // pagination change control\r\n  function onPageChange(p) {\r\n    setPage(p);\r\n  }\r\n\r\n  // on page change, load new sliced data\r\n  // here you would make another server request for new data\r\n  useEffect(() => {\r\n    // If Filters Applied\r\n    if (filter === \"paid\") {\r\n      setData(\r\n        response\r\n          .filter((order) => order.status === \"Paid\")\r\n          .slice((page - 1) * resultsPerPage, page * resultsPerPage)\r\n      );\r\n    }\r\n    if (filter === \"un-paid\") {\r\n      setData(\r\n        response\r\n          .filter((order) => order.status === \"Un-paid\")\r\n          .slice((page - 1) * resultsPerPage, page * resultsPerPage)\r\n      );\r\n    }\r\n    if (filter === \"completed\") {\r\n      setData(\r\n        response\r\n          .filter((order) => order.status === \"Completed\")\r\n          .slice((page - 1) * resultsPerPage, page * resultsPerPage)\r\n      );\r\n    }\r\n\r\n    // if filters dosent applied\r\n    if (filter === \"all\" || !filter) {\r\n      setData(\r\n        response.slice((page - 1) * resultsPerPage, page * resultsPerPage)\r\n      );\r\n    }\r\n  }, [page, resultsPerPage, filter]);\r\n\r\n  return (\r\n    <div>\r\n      {/* Table */}\r\n      <TableContainer className=\"mb-8\">\r\n        <Table>\r\n          <TableHeader>\r\n            <tr>\r\n              <TableCell>Client</TableCell>\r\n              <TableCell>Order ID</TableCell>\r\n              <TableCell>Amount</TableCell>\r\n              <TableCell>Status</TableCell>\r\n              <TableCell>Date</TableCell>\r\n            </tr>\r\n          </TableHeader>\r\n          <TableBody>\r\n            {data.map((user, i) => (\r\n              <TableRow key={i}>\r\n                <TableCell>\r\n                  <div className=\"flex items-center text-sm\">\r\n                    <Avatar\r\n                      className=\"hidden mr-3 md:block\"\r\n                      src={user.avatar}\r\n                      alt=\"User image\"\r\n                    />\r\n                    <div>\r\n                      <p className=\"font-semibold\">{user.name}</p>\r\n                    </div>\r\n                  </div>\r\n                </TableCell>\r\n                <TableCell>\r\n                  <span className=\"text-sm\">#000{i}</span>\r\n                </TableCell>\r\n                <TableCell>\r\n                  <span className=\"text-sm\">$ {user.amount}</span>\r\n                </TableCell>\r\n                <TableCell>\r\n                  <Badge\r\n                    type={\r\n                      user.status === \"Un-paid\"\r\n                        ? \"danger\"\r\n                        : user.status === \"Paid\"\r\n                        ? \"success\"\r\n                        : user.status === \"Completed\"\r\n                        ? \"warning\"\r\n                        : \"neutral\"\r\n                    }\r\n                  >\r\n                    {user.status}\r\n                  </Badge>\r\n                </TableCell>\r\n                <TableCell>\r\n                  <span className=\"text-sm\">\r\n                    {new Date(user.date).toLocaleDateString()}\r\n                  </span>\r\n                </TableCell>\r\n              </TableRow>\r\n            ))}\r\n          </TableBody>\r\n        </Table>\r\n        <TableFooter>\r\n          <Pagination\r\n            totalResults={totalResults}\r\n            resultsPerPage={resultsPerPage}\r\n            label=\"Table navigation\"\r\n            onChange={onPageChange}\r\n          />\r\n        </TableFooter>\r\n      </TableContainer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default OrdersTable;\r\n"]},"metadata":{},"sourceType":"module"}